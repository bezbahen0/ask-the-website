digraph tree {
    "body";
    "\\n";
    "div";
    "\\n";
    "div";
    "a";
    "Skip to main content";
    "div";
    "div";
    "A newer LangChain version is out! Check out the";
    "a";
    "latest version";
    ".";
    "nav";
    "div";
    "div";
    "button";
    "svg";
    "path";
    "a";
    "div";
    "img";
    "img";
    "a";
    "Components";
    "a";
    "Integrations";
    "a";
    "Guides";
    "a";
    "API Reference";
    "svg";
    "path";
    "div";
    "a";
    "More";
    "ul";
    "li";
    "a";
    "People";
    "li";
    "a";
    "Versioning";
    "li";
    "a";
    "Contributing";
    "li";
    "a";
    "Templates";
    "li";
    "a";
    "Cookbooks";
    "svg";
    "path";
    "li";
    "a";
    "Tutorials";
    "li";
    "a";
    "YouTube";
    "div";
    "div";
    "a";
    "v0.1";
    "ul";
    "li";
    "a";
    "Latest";
    "svg";
    "path";
    "li";
    "a";
    "v0.2";
    "svg";
    "path";
    "li";
    "a";
    "v0.1";
    "div";
    "a";
    "\\xf0\\x9f\\xa6\\x9c\\xef\\xb8\\x8f\\xf0\\x9f\\x94\\x97";
    "ul";
    "li";
    "a";
    "LangSmith";
    "svg";
    "path";
    "li";
    "a";
    "LangSmith Docs";
    "svg";
    "path";
    "li";
    "a";
    "LangServe GitHub";
    "svg";
    "path";
    "li";
    "a";
    "Templates GitHub";
    "svg";
    "path";
    "li";
    "a";
    "Templates Hub";
    "svg";
    "path";
    "li";
    "a";
    "LangChain Hub";
    "svg";
    "path";
    "li";
    "a";
    "JS/TS Docs";
    "svg";
    "path";
    "a";
    "\\xf0\\x9f\\x92\\xac";
    "svg";
    "path";
    "a";
    "div";
    "button";
    "svg";
    "path";
    "svg";
    "path";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "span";
    "Search";
    "span";
    "div";
    "div";
    "button";
    "div";
    "aside";
    "div";
    "div";
    "nav";
    "ul";
    "li";
    "div";
    "a";
    "Model I/O";
    "ul";
    "li";
    "div";
    "a";
    "Prompts";
    "button";
    "li";
    "div";
    "a";
    "Chat models";
    "button";
    "li";
    "div";
    "a";
    "LLMs";
    "button";
    "li";
    "div";
    "a";
    "Output parsers";
    "button";
    "li";
    "div";
    "a";
    "Retrieval";
    "ul";
    "li";
    "div";
    "a";
    "Document loaders";
    "button";
    "li";
    "div";
    "a";
    "Text splitters";
    "button";
    "ul";
    "li";
    "a";
    "Text Splitters";
    "li";
    "a";
    "Split by HTML header";
    "li";
    "a";
    "Split by HTML section";
    "li";
    "a";
    "Split by character";
    "li";
    "a";
    "Split code";
    "li";
    "a";
    "MarkdownHeaderTextSplitter";
    "li";
    "a";
    "Recursively split JSON";
    "li";
    "a";
    "Recursively split by character";
    "li";
    "a";
    "Semantic Chunking";
    "li";
    "a";
    "Split by tokens";
    "li";
    "div";
    "a";
    "Embedding models";
    "button";
    "li";
    "a";
    "Vector stores";
    "li";
    "div";
    "a";
    "Retrievers";
    "button";
    "li";
    "a";
    "Indexing";
    "li";
    "div";
    "a";
    "Composition";
    "ul";
    "li";
    "div";
    "a";
    "Tools";
    "button";
    "li";
    "div";
    "a";
    "Agents";
    "button";
    "li";
    "a";
    "Chains";
    "li";
    "div";
    "a";
    "More";
    "li";
    "a";
    "Components";
    "button";
    "svg";
    "g";
    "path";
    "path";
    "main";
    "div";
    "div";
    "div";
    "div";
    "div";
    "This is documentation for";
    "LangChain";
    "b";
    "v0.1";
    ", which is no longer actively maintained.";
    "div";
    "For the current stable version, see";
    "b";
    "a";
    "this version";
    "(";
    "Latest";
    ").";
    "div";
    "article";
    "nav";
    "ul";
    "li";
    "a";
    "svg";
    "path";
    "li";
    "a";
    "span";
    "Retrieval";
    "meta";
    "li";
    "a";
    "span";
    "Text splitters";
    "meta";
    "li";
    "span";
    "MarkdownHeaderTextSplitter";
    "meta";
    "div";
    "button";
    "On this page";
    "div";
    "h1";
    "MarkdownHeaderTextSplitter";
    "h3";
    "Motivation";
    "a";
    "\\xe2\\x80\\x8b";
    "p";
    "Many chat or Q+A applications involve chunking input documents prior to embedding and vector storage.";
    "p";
    "a";
    "These notes";
    "from Pinecone provide some useful tips:";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "When a full paragraph or document is embedded, the embedding process considers both the overall context and the relationships between the sentences and phrases within the text. This can result in a more comprehensive vector representation that captures the broader meaning and themes of the text.";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "p";
    "As mentioned, chunking often aims to keep text with common context together. With this in mind, we might want to specifically honor the structure of the document itself. For example, a markdown file is organized by headers. Creating chunks within specific header groups is an intuitive idea. To address this challenge, we can use";
    "code";
    "MarkdownHeaderTextSplitter";
    ". This will split a markdown file by a specified set of headers.";
    "p";
    "For example, if we want to split this markdown:";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "md = '# Foo\\\\n\\\\n ## Bar\\\\n\\\\nHi this is Jim  \\\\nHi this is Joe\\\\n\\\\n ## Baz\\\\n\\\\n Hi this is Molly'";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "p";
    "We can specify the headers to split on:";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "[(\"#\", \"Header 1\"),(\"##\", \"Header 2\")]";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "p";
    "And content is grouped or split by common headers:";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "{'content': 'Hi this is Jim  \\\\nHi this is Joe', 'metadata': {'Header 1': 'Foo', 'Header 2': 'Bar'}}";
    "br";
    "span";
    "span";
    "{'content': 'Hi this is Molly', 'metadata': {'Header 1': 'Foo', 'Header 2': 'Baz'}}";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "p";
    "Let's have a look at some examples below.";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "%";
    "span";
    "pip install";
    "span";
    "-";
    "span";
    "qU langchain";
    "span";
    "-";
    "span";
    "text";
    "span";
    "-";
    "span";
    "splitters";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "from";
    "span";
    "langchain_text_splitters";
    "span";
    "import";
    "span";
    "MarkdownHeaderTextSplitter";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "div";
    "h4";
    "API Reference:";
    "ul";
    "li";
    "a";
    "span";
    "MarkdownHeaderTextSplitter";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "markdown_document";
    "span";
    "=";
    "span";
    "span";
    "\"# Foo\\\\n\\\\n    ## Bar\\\\n\\\\nHi this is Jim\\\\n\\\\nHi this is Joe\\\\n\\\\n ### Boo \\\\n\\\\n Hi this is Lance \\\\n\\\\n ## Baz\\\\n\\\\n Hi this is Molly\"";
    "span";
    "br";
    "span";
    "span";
    "br";
    "span";
    "span";
    "headers_to_split_on";
    "span";
    "=";
    "span";
    "span";
    "[";
    "span";
    "br";
    "span";
    "span";
    "span";
    "(";
    "span";
    "\"#\"";
    "span";
    ",";
    "span";
    "span";
    "\"Header 1\"";
    "span";
    ")";
    "span";
    ",";
    "span";
    "br";
    "span";
    "span";
    "span";
    "(";
    "span";
    "\"##\"";
    "span";
    ",";
    "span";
    "span";
    "\"Header 2\"";
    "span";
    ")";
    "span";
    ",";
    "span";
    "br";
    "span";
    "span";
    "span";
    "(";
    "span";
    "\"###\"";
    "span";
    ",";
    "span";
    "span";
    "\"Header 3\"";
    "span";
    ")";
    "span";
    ",";
    "span";
    "br";
    "span";
    "span";
    "span";
    "]";
    "span";
    "br";
    "span";
    "span";
    "br";
    "span";
    "span";
    "markdown_splitter";
    "span";
    "=";
    "span";
    "MarkdownHeaderTextSplitter";
    "span";
    "(";
    "span";
    "headers_to_split_on";
    "span";
    "=";
    "span";
    "headers_to_split_on";
    "span";
    ")";
    "span";
    "br";
    "span";
    "span";
    "md_header_splits";
    "span";
    "=";
    "span";
    "markdown_splitter";
    "span";
    ".";
    "span";
    "split_text";
    "span";
    "(";
    "span";
    "markdown_document";
    "span";
    ")";
    "span";
    "br";
    "span";
    "span";
    "md_header_splits";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "[Document(page_content='Hi this is Jim  \\\\nHi this is Joe', metadata={'Header 1': 'Foo', 'Header 2': 'Bar'}),";
    "br";
    "span";
    "span";
    "Document(page_content='Hi this is Lance', metadata={'Header 1': 'Foo', 'Header 2': 'Bar', 'Header 3': 'Boo'}),";
    "br";
    "span";
    "span";
    "Document(page_content='Hi this is Molly', metadata={'Header 1': 'Foo', 'Header 2': 'Baz'})]";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "type";
    "span";
    "(";
    "span";
    "md_header_splits";
    "span";
    "[";
    "span";
    "0";
    "span";
    "]";
    "span";
    ")";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "langchain.schema.document.Document";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "p";
    "By default,";
    "code";
    "MarkdownHeaderTextSplitter";
    "strips headers being split on from the output chunk's content. This can be disabled by setting";
    "code";
    "strip_headers = False";
    ".";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "markdown_splitter";
    "span";
    "=";
    "span";
    "MarkdownHeaderTextSplitter";
    "span";
    "(";
    "span";
    "br";
    "span";
    "span";
    "headers_to_split_on";
    "span";
    "=";
    "span";
    "headers_to_split_on";
    "span";
    ",";
    "span";
    "strip_headers";
    "span";
    "=";
    "span";
    "False";
    "span";
    "br";
    "span";
    "span";
    "span";
    ")";
    "span";
    "br";
    "span";
    "span";
    "md_header_splits";
    "span";
    "=";
    "span";
    "markdown_splitter";
    "span";
    ".";
    "span";
    "split_text";
    "span";
    "(";
    "span";
    "markdown_document";
    "span";
    ")";
    "span";
    "br";
    "span";
    "span";
    "md_header_splits";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "[Document(page_content='# Foo  \\\\n## Bar  \\\\nHi this is Jim  \\\\nHi this is Joe', metadata={'Header 1': 'Foo', 'Header 2': 'Bar'}),";
    "br";
    "span";
    "span";
    "Document(page_content='### Boo  \\\\nHi this is Lance', metadata={'Header 1': 'Foo', 'Header 2': 'Bar', 'Header 3': 'Boo'}),";
    "br";
    "span";
    "span";
    "Document(page_content='## Baz  \\\\nHi this is Molly', metadata={'Header 1': 'Foo', 'Header 2': 'Baz'})]";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "p";
    "Within each markdown group we can then apply any text splitter we want.";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "markdown_document";
    "span";
    "=";
    "span";
    "span";
    "\"# Intro \\\\n\\\\n    ## History \\\\n\\\\n Markdown[9] is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber created Markdown in 2004 as a markup language that is appealing to human readers in its source code form.[9] \\\\n\\\\n Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files. \\\\n\\\\n ## Rise and divergence \\\\n\\\\n As Markdown popularity grew rapidly, many Markdown implementations appeared, driven mostly by the need for \\\\n\\\\n additional features such as tables, footnotes, definition lists,[note 1] and Markdown inside HTML blocks. \\\\n\\\\n #### Standardization \\\\n\\\\n From 2012, a group of people, including Jeff Atwood and John MacFarlane, launched what Atwood characterised as a standardisation effort. \\\\n\\\\n ## Implementations \\\\n\\\\n Implementations of Markdown are available for over a dozen programming languages.\"";
    "span";
    "br";
    "span";
    "span";
    "br";
    "span";
    "span";
    "headers_to_split_on";
    "span";
    "=";
    "span";
    "span";
    "[";
    "span";
    "br";
    "span";
    "span";
    "span";
    "(";
    "span";
    "\"#\"";
    "span";
    ",";
    "span";
    "span";
    "\"Header 1\"";
    "span";
    ")";
    "span";
    ",";
    "span";
    "br";
    "span";
    "span";
    "span";
    "(";
    "span";
    "\"##\"";
    "span";
    ",";
    "span";
    "span";
    "\"Header 2\"";
    "span";
    ")";
    "span";
    ",";
    "span";
    "br";
    "span";
    "span";
    "span";
    "]";
    "span";
    "br";
    "span";
    "span";
    "br";
    "span";
    "span";
    "span";
    "# MD splits";
    "span";
    "br";
    "span";
    "span";
    "markdown_splitter";
    "span";
    "=";
    "span";
    "MarkdownHeaderTextSplitter";
    "span";
    "(";
    "span";
    "br";
    "span";
    "span";
    "headers_to_split_on";
    "span";
    "=";
    "span";
    "headers_to_split_on";
    "span";
    ",";
    "span";
    "strip_headers";
    "span";
    "=";
    "span";
    "False";
    "span";
    "br";
    "span";
    "span";
    "span";
    ")";
    "span";
    "br";
    "span";
    "span";
    "md_header_splits";
    "span";
    "=";
    "span";
    "markdown_splitter";
    "span";
    ".";
    "span";
    "split_text";
    "span";
    "(";
    "span";
    "markdown_document";
    "span";
    ")";
    "span";
    "br";
    "span";
    "span";
    "br";
    "span";
    "span";
    "span";
    "# Char-level splits";
    "span";
    "br";
    "span";
    "span";
    "span";
    "from";
    "span";
    "langchain_text_splitters";
    "span";
    "import";
    "span";
    "RecursiveCharacterTextSplitter";
    "br";
    "span";
    "span";
    "br";
    "span";
    "span";
    "chunk_size";
    "span";
    "=";
    "span";
    "span";
    "250";
    "span";
    "br";
    "span";
    "span";
    "chunk_overlap";
    "span";
    "=";
    "span";
    "span";
    "30";
    "span";
    "br";
    "span";
    "span";
    "text_splitter";
    "span";
    "=";
    "span";
    "RecursiveCharacterTextSplitter";
    "span";
    "(";
    "span";
    "br";
    "span";
    "span";
    "chunk_size";
    "span";
    "=";
    "span";
    "chunk_size";
    "span";
    ",";
    "span";
    "chunk_overlap";
    "span";
    "=";
    "span";
    "chunk_overlap";
    "br";
    "span";
    "span";
    "span";
    ")";
    "span";
    "br";
    "span";
    "span";
    "br";
    "span";
    "span";
    "span";
    "# Split";
    "span";
    "br";
    "span";
    "span";
    "splits";
    "span";
    "=";
    "span";
    "text_splitter";
    "span";
    ".";
    "span";
    "split_documents";
    "span";
    "(";
    "span";
    "md_header_splits";
    "span";
    ")";
    "span";
    "br";
    "span";
    "span";
    "splits";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "div";
    "h4";
    "API Reference:";
    "ul";
    "li";
    "a";
    "span";
    "RecursiveCharacterTextSplitter";
    "div";
    "div";
    "pre";
    "code";
    "span";
    "span";
    "[Document(page_content='# Intro  \\\\n## History  \\\\nMarkdown[9] is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber created Markdown in 2004 as a markup language that is appealing to human readers in its source code form.[9]', metadata={'Header 1': 'Intro', 'Header 2': 'History'}),";
    "br";
    "span";
    "span";
    "Document(page_content='Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files.', metadata={'Header 1': 'Intro', 'Header 2': 'History'}),";
    "br";
    "span";
    "span";
    "Document(page_content='## Rise and divergence  \\\\nAs Markdown popularity grew rapidly, many Markdown implementations appeared, driven mostly by the need for  \\\\nadditional features such as tables, footnotes, definition lists,[note 1] and Markdown inside HTML blocks.', metadata={'Header 1': 'Intro', 'Header 2': 'Rise and divergence'}),";
    "br";
    "span";
    "span";
    "Document(page_content='#### Standardization  \\\\nFrom 2012, a group of people, including Jeff Atwood and John MacFarlane, launched what Atwood characterised as a standardisation effort.', metadata={'Header 1': 'Intro', 'Header 2': 'Rise and divergence'}),";
    "br";
    "span";
    "span";
    "Document(page_content='## Implementations  \\\\nImplementations of Markdown are available for over a dozen programming languages.', metadata={'Header 1': 'Intro', 'Header 2': 'Implementations'})]";
    "br";
    "div";
    "button";
    "span";
    "svg";
    "path";
    "svg";
    "path";
    "div";
    "hr";
    "h4";
    "Help us out by providing feedback on this documentation page:";
    "div";
    "div";
    "svg";
    "path";
    "div";
    "svg";
    "path";
    "nav";
    "a";
    "div";
    "Previous";
    "div";
    "Split code";
    "a";
    "div";
    "Next";
    "div";
    "Recursively split JSON";
    "div";
    "div";
    "ul";
    "li";
    "a";
    "Motivation";
    "footer";
    "div";
    "div";
    "div";
    "div";
    "Community";
    "ul";
    "li";
    "a";
    "Discord";
    "svg";
    "path";
    "li";
    "a";
    "Twitter";
    "svg";
    "path";
    "div";
    "div";
    "GitHub";
    "ul";
    "li";
    "a";
    "Python";
    "svg";
    "path";
    "li";
    "a";
    "JS/TS";
    "svg";
    "path";
    "div";
    "div";
    "More";
    "ul";
    "li";
    "a";
    "Homepage";
    "svg";
    "path";
    "li";
    "a";
    "Blog";
    "svg";
    "path";
    "li";
    "a";
    "YouTube";
    "svg";
    "path";
    "div";
    "div";
    "Copyright \\xc2\\xa9 2024 LangChain, Inc.";
    "\\n";
    "\\n";
    "\\n";
    "body" -> "\\n";
    "body" -> "div";
    "body" -> "\\n";
    "body" -> "\\n";
    "body" -> "\\n";
    "div" -> "\\n";
    "div" -> "div";
    "div" -> "div";
    "div" -> "nav";
    "div" -> "div";
    "div" -> "footer";
    "div" -> "a";
    "a" -> "Skip to main content";
    "div" -> "div";
    "div" -> "A newer LangChain version is out! Check out the";
    "div" -> "a";
    "div" -> ".";
    "a" -> "latest version";
    "nav" -> "div";
    "nav" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "button";
    "div" -> "a";
    "div" -> "a";
    "div" -> "a";
    "div" -> "a";
    "div" -> "a";
    "div" -> "div";
    "button" -> "svg";
    "svg" -> "path";
    "a" -> "div";
    "div" -> "img";
    "div" -> "img";
    "a" -> "Components";
    "a" -> "Integrations";
    "a" -> "Guides";
    "a" -> "API Reference";
    "a" -> "svg";
    "svg" -> "path";
    "div" -> "a";
    "div" -> "ul";
    "a" -> "More";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "a";
    "a" -> "People";
    "li" -> "a";
    "a" -> "Versioning";
    "li" -> "a";
    "a" -> "Contributing";
    "li" -> "a";
    "a" -> "Templates";
    "li" -> "a";
    "a" -> "Cookbooks";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "Tutorials";
    "li" -> "a";
    "a" -> "YouTube";
    "div" -> "div";
    "div" -> "div";
    "div" -> "a";
    "div" -> "a";
    "div" -> "div";
    "div" -> "div";
    "div" -> "a";
    "div" -> "ul";
    "a" -> "v0.1";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "a";
    "a" -> "Latest";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "v0.2";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "v0.1";
    "div" -> "a";
    "div" -> "ul";
    "a" -> "\\xf0\\x9f\\xa6\\x9c\\xef\\xb8\\x8f\\xf0\\x9f\\x94\\x97";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "a";
    "a" -> "LangSmith";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "LangSmith Docs";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "LangServe GitHub";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "Templates GitHub";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "Templates Hub";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "LangChain Hub";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "JS/TS Docs";
    "a" -> "svg";
    "svg" -> "path";
    "a" -> "\\xf0\\x9f\\x92\\xac";
    "a" -> "svg";
    "svg" -> "path";
    "div" -> "button";
    "button" -> "svg";
    "button" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "div" -> "button";
    "button" -> "span";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "span";
    "svg" -> "path";
    "span" -> "Search";
    "div" -> "button";
    "div" -> "div";
    "div" -> "aside";
    "div" -> "main";
    "aside" -> "div";
    "div" -> "div";
    "div" -> "nav";
    "div" -> "button";
    "nav" -> "ul";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "div";
    "li" -> "ul";
    "div" -> "a";
    "a" -> "Model I/O";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "div";
    "div" -> "a";
    "div" -> "button";
    "a" -> "Prompts";
    "li" -> "div";
    "div" -> "a";
    "div" -> "button";
    "a" -> "Chat models";
    "li" -> "div";
    "div" -> "a";
    "div" -> "button";
    "a" -> "LLMs";
    "li" -> "div";
    "div" -> "a";
    "div" -> "button";
    "a" -> "Output parsers";
    "li" -> "div";
    "li" -> "ul";
    "div" -> "a";
    "a" -> "Retrieval";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "div";
    "div" -> "a";
    "div" -> "button";
    "a" -> "Document loaders";
    "li" -> "div";
    "li" -> "ul";
    "div" -> "a";
    "div" -> "button";
    "a" -> "Text splitters";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "a";
    "a" -> "Text Splitters";
    "li" -> "a";
    "a" -> "Split by HTML header";
    "li" -> "a";
    "a" -> "Split by HTML section";
    "li" -> "a";
    "a" -> "Split by character";
    "li" -> "a";
    "a" -> "Split code";
    "li" -> "a";
    "a" -> "MarkdownHeaderTextSplitter";
    "li" -> "a";
    "a" -> "Recursively split JSON";
    "li" -> "a";
    "a" -> "Recursively split by character";
    "li" -> "a";
    "a" -> "Semantic Chunking";
    "li" -> "a";
    "a" -> "Split by tokens";
    "li" -> "div";
    "div" -> "a";
    "div" -> "button";
    "a" -> "Embedding models";
    "li" -> "a";
    "a" -> "Vector stores";
    "li" -> "div";
    "div" -> "a";
    "div" -> "button";
    "a" -> "Retrievers";
    "li" -> "a";
    "a" -> "Indexing";
    "li" -> "div";
    "li" -> "ul";
    "div" -> "a";
    "a" -> "Composition";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "div";
    "div" -> "a";
    "div" -> "button";
    "a" -> "Tools";
    "li" -> "div";
    "div" -> "a";
    "div" -> "button";
    "a" -> "Agents";
    "li" -> "a";
    "a" -> "Chains";
    "li" -> "div";
    "div" -> "a";
    "a" -> "More";
    "li" -> "a";
    "a" -> "Components";
    "button" -> "svg";
    "svg" -> "g";
    "g" -> "path";
    "g" -> "path";
    "main" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "This is documentation for";
    "div" -> "LangChain";
    "div" -> "b";
    "div" -> ", which is no longer actively maintained.";
    "b" -> "v0.1";
    "div" -> "For the current stable version, see";
    "div" -> "b";
    "div" -> "(";
    "div" -> "Latest";
    "div" -> ").";
    "b" -> "a";
    "a" -> "this version";
    "div" -> "article";
    "div" -> "nav";
    "article" -> "nav";
    "article" -> "div";
    "article" -> "div";
    "article" -> "div";
    "nav" -> "ul";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "a";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "li" -> "meta";
    "a" -> "span";
    "span" -> "Retrieval";
    "li" -> "a";
    "li" -> "meta";
    "a" -> "span";
    "span" -> "Text splitters";
    "li" -> "span";
    "li" -> "meta";
    "span" -> "MarkdownHeaderTextSplitter";
    "div" -> "button";
    "button" -> "On this page";
    "div" -> "h1";
    "div" -> "h3";
    "div" -> "p";
    "div" -> "p";
    "div" -> "div";
    "div" -> "p";
    "div" -> "p";
    "div" -> "div";
    "div" -> "p";
    "div" -> "div";
    "div" -> "p";
    "div" -> "div";
    "div" -> "p";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "p";
    "div" -> "div";
    "div" -> "div";
    "div" -> "p";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "h1" -> "MarkdownHeaderTextSplitter";
    "h3" -> "Motivation";
    "h3" -> "a";
    "a" -> "\\xe2\\x80\\x8b";
    "p" -> "Many chat or Q+A applications involve chunking input documents prior to embedding and vector storage.";
    "p" -> "a";
    "p" -> "from Pinecone provide some useful tips:";
    "a" -> "These notes";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "When a full paragraph or document is embedded, the embedding process considers both the overall context and the relationships between the sentences and phrases within the text. This can result in a more comprehensive vector representation that captures the broader meaning and themes of the text.";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "p" -> "As mentioned, chunking often aims to keep text with common context together. With this in mind, we might want to specifically honor the structure of the document itself. For example, a markdown file is organized by headers. Creating chunks within specific header groups is an intuitive idea. To address this challenge, we can use";
    "p" -> "code";
    "p" -> ". This will split a markdown file by a specified set of headers.";
    "code" -> "MarkdownHeaderTextSplitter";
    "p" -> "For example, if we want to split this markdown:";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "md = '# Foo\\\\n\\\\n ## Bar\\\\n\\\\nHi this is Jim  \\\\nHi this is Joe\\\\n\\\\n ## Baz\\\\n\\\\n Hi this is Molly'";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "p" -> "We can specify the headers to split on:";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "[(\"#\", \"Header 1\"),(\"##\", \"Header 2\")]";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "p" -> "And content is grouped or split by common headers:";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "code" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "{'content': 'Hi this is Jim  \\\\nHi this is Joe', 'metadata': {'Header 1': 'Foo', 'Header 2': 'Bar'}}";
    "span" -> "span";
    "span" -> "br";
    "span" -> "{'content': 'Hi this is Molly', 'metadata': {'Header 1': 'Foo', 'Header 2': 'Baz'}}";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "p" -> "Let's have a look at some examples below.";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "%";
    "span" -> "pip install";
    "span" -> "-";
    "span" -> "qU langchain";
    "span" -> "-";
    "span" -> "text";
    "span" -> "-";
    "span" -> "splitters";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "from";
    "span" -> "langchain_text_splitters";
    "span" -> "import";
    "span" -> "MarkdownHeaderTextSplitter";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "div" -> "h4";
    "div" -> "ul";
    "h4" -> "API Reference:";
    "ul" -> "li";
    "li" -> "a";
    "a" -> "span";
    "span" -> "MarkdownHeaderTextSplitter";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "markdown_document";
    "span" -> "=";
    "span" -> "\"# Foo\\\\n\\\\n    ## Bar\\\\n\\\\nHi this is Jim\\\\n\\\\nHi this is Joe\\\\n\\\\n ### Boo \\\\n\\\\n Hi this is Lance \\\\n\\\\n ## Baz\\\\n\\\\n Hi this is Molly\"";
    "span" -> "span";
    "span" -> "br";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "headers_to_split_on";
    "span" -> "=";
    "span" -> "[";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "(";
    "span" -> "\"#\"";
    "span" -> ",";
    "span" -> "\"Header 1\"";
    "span" -> ")";
    "span" -> ",";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "(";
    "span" -> "\"##\"";
    "span" -> ",";
    "span" -> "\"Header 2\"";
    "span" -> ")";
    "span" -> ",";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "(";
    "span" -> "\"###\"";
    "span" -> ",";
    "span" -> "\"Header 3\"";
    "span" -> ")";
    "span" -> ",";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "]";
    "span" -> "span";
    "span" -> "br";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "markdown_splitter";
    "span" -> "=";
    "span" -> "MarkdownHeaderTextSplitter";
    "span" -> "(";
    "span" -> "headers_to_split_on";
    "span" -> "=";
    "span" -> "headers_to_split_on";
    "span" -> ")";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "md_header_splits";
    "span" -> "=";
    "span" -> "markdown_splitter";
    "span" -> ".";
    "span" -> "split_text";
    "span" -> "(";
    "span" -> "markdown_document";
    "span" -> ")";
    "span" -> "span";
    "span" -> "br";
    "span" -> "md_header_splits";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "[Document(page_content='Hi this is Jim  \\\\nHi this is Joe', metadata={'Header 1': 'Foo', 'Header 2': 'Bar'}),";
    "span" -> "span";
    "span" -> "br";
    "span" -> "Document(page_content='Hi this is Lance', metadata={'Header 1': 'Foo', 'Header 2': 'Bar', 'Header 3': 'Boo'}),";
    "span" -> "span";
    "span" -> "br";
    "span" -> "Document(page_content='Hi this is Molly', metadata={'Header 1': 'Foo', 'Header 2': 'Baz'})]";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "type";
    "span" -> "(";
    "span" -> "md_header_splits";
    "span" -> "[";
    "span" -> "0";
    "span" -> "]";
    "span" -> ")";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "langchain.schema.document.Document";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "p" -> "By default,";
    "p" -> "code";
    "p" -> "strips headers being split on from the output chunk's content. This can be disabled by setting";
    "p" -> "code";
    "p" -> ".";
    "code" -> "MarkdownHeaderTextSplitter";
    "code" -> "strip_headers = False";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "markdown_splitter";
    "span" -> "=";
    "span" -> "MarkdownHeaderTextSplitter";
    "span" -> "(";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "headers_to_split_on";
    "span" -> "=";
    "span" -> "headers_to_split_on";
    "span" -> ",";
    "span" -> "strip_headers";
    "span" -> "=";
    "span" -> "False";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> ")";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "md_header_splits";
    "span" -> "=";
    "span" -> "markdown_splitter";
    "span" -> ".";
    "span" -> "split_text";
    "span" -> "(";
    "span" -> "markdown_document";
    "span" -> ")";
    "span" -> "span";
    "span" -> "br";
    "span" -> "md_header_splits";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "[Document(page_content='# Foo  \\\\n## Bar  \\\\nHi this is Jim  \\\\nHi this is Joe', metadata={'Header 1': 'Foo', 'Header 2': 'Bar'}),";
    "span" -> "span";
    "span" -> "br";
    "span" -> "Document(page_content='### Boo  \\\\nHi this is Lance', metadata={'Header 1': 'Foo', 'Header 2': 'Bar', 'Header 3': 'Boo'}),";
    "span" -> "span";
    "span" -> "br";
    "span" -> "Document(page_content='## Baz  \\\\nHi this is Molly', metadata={'Header 1': 'Foo', 'Header 2': 'Baz'})]";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "p" -> "Within each markdown group we can then apply any text splitter we want.";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "markdown_document";
    "span" -> "=";
    "span" -> "\"# Intro \\\\n\\\\n    ## History \\\\n\\\\n Markdown[9] is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber created Markdown in 2004 as a markup language that is appealing to human readers in its source code form.[9] \\\\n\\\\n Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files. \\\\n\\\\n ## Rise and divergence \\\\n\\\\n As Markdown popularity grew rapidly, many Markdown implementations appeared, driven mostly by the need for \\\\n\\\\n additional features such as tables, footnotes, definition lists,[note 1] and Markdown inside HTML blocks. \\\\n\\\\n #### Standardization \\\\n\\\\n From 2012, a group of people, including Jeff Atwood and John MacFarlane, launched what Atwood characterised as a standardisation effort. \\\\n\\\\n ## Implementations \\\\n\\\\n Implementations of Markdown are available for over a dozen programming languages.\"";
    "span" -> "span";
    "span" -> "br";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "headers_to_split_on";
    "span" -> "=";
    "span" -> "[";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "(";
    "span" -> "\"#\"";
    "span" -> ",";
    "span" -> "\"Header 1\"";
    "span" -> ")";
    "span" -> ",";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "(";
    "span" -> "\"##\"";
    "span" -> ",";
    "span" -> "\"Header 2\"";
    "span" -> ")";
    "span" -> ",";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "]";
    "span" -> "span";
    "span" -> "br";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "# MD splits";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "markdown_splitter";
    "span" -> "=";
    "span" -> "MarkdownHeaderTextSplitter";
    "span" -> "(";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "headers_to_split_on";
    "span" -> "=";
    "span" -> "headers_to_split_on";
    "span" -> ",";
    "span" -> "strip_headers";
    "span" -> "=";
    "span" -> "False";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> ")";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "md_header_splits";
    "span" -> "=";
    "span" -> "markdown_splitter";
    "span" -> ".";
    "span" -> "split_text";
    "span" -> "(";
    "span" -> "markdown_document";
    "span" -> ")";
    "span" -> "span";
    "span" -> "br";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "# Char-level splits";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "from";
    "span" -> "langchain_text_splitters";
    "span" -> "import";
    "span" -> "RecursiveCharacterTextSplitter";
    "span" -> "span";
    "span" -> "br";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "chunk_size";
    "span" -> "=";
    "span" -> "250";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "chunk_overlap";
    "span" -> "=";
    "span" -> "30";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "text_splitter";
    "span" -> "=";
    "span" -> "RecursiveCharacterTextSplitter";
    "span" -> "(";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "chunk_size";
    "span" -> "=";
    "span" -> "chunk_size";
    "span" -> ",";
    "span" -> "chunk_overlap";
    "span" -> "=";
    "span" -> "chunk_overlap";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> ")";
    "span" -> "span";
    "span" -> "br";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "# Split";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "splits";
    "span" -> "=";
    "span" -> "text_splitter";
    "span" -> ".";
    "span" -> "split_documents";
    "span" -> "(";
    "span" -> "md_header_splits";
    "span" -> ")";
    "span" -> "span";
    "span" -> "br";
    "span" -> "splits";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "div" -> "h4";
    "div" -> "ul";
    "h4" -> "API Reference:";
    "ul" -> "li";
    "li" -> "a";
    "a" -> "span";
    "span" -> "RecursiveCharacterTextSplitter";
    "div" -> "div";
    "div" -> "pre";
    "div" -> "div";
    "pre" -> "code";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "code" -> "span";
    "span" -> "span";
    "span" -> "br";
    "span" -> "[Document(page_content='# Intro  \\\\n## History  \\\\nMarkdown[9] is a lightweight markup language for creating formatted text using a plain-text editor. John Gruber created Markdown in 2004 as a markup language that is appealing to human readers in its source code form.[9]', metadata={'Header 1': 'Intro', 'Header 2': 'History'}),";
    "span" -> "span";
    "span" -> "br";
    "span" -> "Document(page_content='Markdown is widely used in blogging, instant messaging, online forums, collaborative software, documentation pages, and readme files.', metadata={'Header 1': 'Intro', 'Header 2': 'History'}),";
    "span" -> "span";
    "span" -> "br";
    "span" -> "Document(page_content='## Rise and divergence  \\\\nAs Markdown popularity grew rapidly, many Markdown implementations appeared, driven mostly by the need for  \\\\nadditional features such as tables, footnotes, definition lists,[note 1] and Markdown inside HTML blocks.', metadata={'Header 1': 'Intro', 'Header 2': 'Rise and divergence'}),";
    "span" -> "span";
    "span" -> "br";
    "span" -> "Document(page_content='#### Standardization  \\\\nFrom 2012, a group of people, including Jeff Atwood and John MacFarlane, launched what Atwood characterised as a standardisation effort.', metadata={'Header 1': 'Intro', 'Header 2': 'Rise and divergence'}),";
    "span" -> "span";
    "span" -> "br";
    "span" -> "Document(page_content='## Implementations  \\\\nImplementations of Markdown are available for over a dozen programming languages.', metadata={'Header 1': 'Intro', 'Header 2': 'Implementations'})]";
    "div" -> "button";
    "button" -> "span";
    "span" -> "svg";
    "span" -> "svg";
    "svg" -> "path";
    "svg" -> "path";
    "div" -> "hr";
    "div" -> "h4";
    "div" -> "div";
    "h4" -> "Help us out by providing feedback on this documentation page:";
    "div" -> "div";
    "div" -> "div";
    "div" -> "svg";
    "svg" -> "path";
    "div" -> "svg";
    "svg" -> "path";
    "nav" -> "a";
    "nav" -> "a";
    "a" -> "div";
    "a" -> "div";
    "div" -> "Previous";
    "div" -> "Split code";
    "a" -> "div";
    "a" -> "div";
    "div" -> "Next";
    "div" -> "Recursively split JSON";
    "div" -> "div";
    "div" -> "ul";
    "ul" -> "li";
    "li" -> "a";
    "a" -> "Motivation";
    "footer" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "div";
    "div" -> "ul";
    "div" -> "Community";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "a";
    "a" -> "Discord";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "Twitter";
    "a" -> "svg";
    "svg" -> "path";
    "div" -> "div";
    "div" -> "ul";
    "div" -> "GitHub";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "a";
    "a" -> "Python";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "JS/TS";
    "a" -> "svg";
    "svg" -> "path";
    "div" -> "div";
    "div" -> "ul";
    "div" -> "More";
    "ul" -> "li";
    "ul" -> "li";
    "ul" -> "li";
    "li" -> "a";
    "a" -> "Homepage";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "Blog";
    "a" -> "svg";
    "svg" -> "path";
    "li" -> "a";
    "a" -> "YouTube";
    "a" -> "svg";
    "svg" -> "path";
    "div" -> "div";
    "div" -> "Copyright \\xc2\\xa9 2024 LangChain, Inc.";
}
